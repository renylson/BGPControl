#!/bin/bash

#################################################################
#                                                               #
#           BGPView - Script de Desinstala√ß√£o                  #
#           Remove completamente o sistema                     #
#                                                               #
#################################################################

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Vari√°veis
INSTALL_DIR="/opt/bgpview"
SERVICE_USER="bgpview"
DB_NAME="bgpview"
DB_USER="bgpview"

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "\n${PURPLE}${BOLD}========================================${NC}"
    echo -e "${PURPLE}${BOLD} $1${NC}"
    echo -e "${PURPLE}${BOLD}========================================${NC}\n"
}

# Banner
show_banner() {
    clear
    echo -e "${RED}${BOLD}"
    cat << 'EOF'
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë      ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù       ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù 
                                                        
              SCRIPT DE DESINSTALA√á√ÉO
EOF
    echo -e "${NC}\n"
    echo -e "${RED}Este script remover√° completamente o BGPView do sistema!${NC}\n"
}

# Verificar se est√° executando como root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "Este script deve ser executado como root!"
        log_info "Execute: sudo bash uninstall.sh"
        exit 1
    fi
}

# Confirma√ß√£o do usu√°rio
confirm_uninstall() {
    echo -e "${BOLD}O que ser√° removido:${NC}"
    echo "‚Ä¢ Aplica√ß√£o BGPView ($INSTALL_DIR)"
    echo "‚Ä¢ Servi√ßo systemd (bgpview-backend)"
    echo "‚Ä¢ Configura√ß√£o do Nginx"
    echo "‚Ä¢ Usu√°rio do sistema ($SERVICE_USER)"
    echo "‚Ä¢ Scripts de manuten√ß√£o"
    echo ""
    echo -e "${YELLOW}${BOLD}ATEN√á√ÉO:${NC} ${YELLOW}O banco de dados PostgreSQL N√ÉO ser√° removido${NC}"
    echo -e "${YELLOW}Para remover tamb√©m o banco, execute manualmente:${NC}"
    echo -e "${YELLOW}  sudo -u postgres dropdb $DB_NAME${NC}"
    echo -e "${YELLOW}  sudo -u postgres dropuser $DB_USER${NC}"
    echo ""
    
    read -p "Tem certeza que deseja continuar? (s/N): " confirm
    if [[ ! $confirm =~ ^[SsYy]$ ]]; then
        log_info "Desinstala√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    echo ""
    read -p "Digite 'REMOVER' para confirmar: " confirm_word
    if [[ "$confirm_word" != "REMOVER" ]]; then
        log_info "Confirma√ß√£o incorreta. Desinstala√ß√£o cancelada."
        exit 0
    fi
}

# Parar servi√ßos
stop_services() {
    log_header "PARANDO SERVI√áOS"
    
    # Parar backend
    if systemctl is-active --quiet bgpview-backend; then
        log_info "Parando servi√ßo bgpview-backend..."
        systemctl stop bgpview-backend
    fi
    
    # Desabilitar servi√ßo
    if systemctl is-enabled --quiet bgpview-backend 2>/dev/null; then
        log_info "Desabilitando servi√ßo bgpview-backend..."
        systemctl disable bgpview-backend
    fi
    
    log_success "Servi√ßos parados"
}

# Remover arquivos systemd
remove_systemd() {
    log_header "REMOVENDO CONFIGURA√á√ïES SYSTEMD"
    
    if [[ -f /etc/systemd/system/bgpview-backend.service ]]; then
        log_info "Removendo arquivo de servi√ßo..."
        rm -f /etc/systemd/system/bgpview-backend.service
        systemctl daemon-reload
        log_success "Arquivo de servi√ßo removido"
    else
        log_info "Arquivo de servi√ßo n√£o encontrado"
    fi
}

# Remover configura√ß√£o do Nginx
remove_nginx_config() {
    log_header "REMOVENDO CONFIGURA√á√ÉO NGINX"
    
    # Remover link simb√≥lico
    if [[ -L /etc/nginx/sites-enabled/bgpview ]]; then
        log_info "Removendo site habilitado..."
        rm -f /etc/nginx/sites-enabled/bgpview
    fi
    
    # Remover arquivo de configura√ß√£o
    if [[ -f /etc/nginx/sites-available/bgpview ]]; then
        log_info "Removendo arquivo de configura√ß√£o..."
        rm -f /etc/nginx/sites-available/bgpview
    fi
    
    # Testar configura√ß√£o do Nginx
    if nginx -t 2>/dev/null; then
        log_info "Recarregando Nginx..."
        systemctl reload nginx
        log_success "Configura√ß√£o do Nginx removida"
    else
        log_warning "Erro na configura√ß√£o do Nginx ap√≥s remo√ß√£o"
    fi
}

# Remover diret√≥rio da aplica√ß√£o
remove_application() {
    log_header "REMOVENDO APLICA√á√ÉO"
    
    if [[ -d "$INSTALL_DIR" ]]; then
        log_info "Removendo diret√≥rio $INSTALL_DIR..."
        rm -rf "$INSTALL_DIR"
        log_success "Diret√≥rio da aplica√ß√£o removido"
    else
        log_info "Diret√≥rio da aplica√ß√£o n√£o encontrado"
    fi
}

# Remover usu√°rio do sistema
remove_user() {
    log_header "REMOVENDO USU√ÅRIO DO SISTEMA"
    
    if id "$SERVICE_USER" &>/dev/null; then
        log_info "Removendo usu√°rio $SERVICE_USER..."
        userdel -r "$SERVICE_USER" 2>/dev/null || {
            # Se falhar ao remover o home, tentar sem -r
            userdel "$SERVICE_USER" 2>/dev/null || log_warning "N√£o foi poss√≠vel remover o usu√°rio $SERVICE_USER"
        }
        log_success "Usu√°rio $SERVICE_USER removido"
    else
        log_info "Usu√°rio $SERVICE_USER n√£o encontrado"
    fi
}

# Remover scripts de manuten√ß√£o
remove_scripts() {
    log_header "REMOVENDO SCRIPTS DE MANUTEN√á√ÉO"
    
    # Remover diret√≥rio de scripts
    if [[ -d /usr/local/bin/bgpview ]]; then
        log_info "Removendo scripts de manuten√ß√£o..."
        rm -rf /usr/local/bin/bgpview
    fi
    
    # Remover links simb√≥licos
    local scripts=("bgpview-status" "bgpview-backup" "bgpview-update")
    for script in "${scripts[@]}"; do
        if [[ -L "/usr/local/bin/$script" ]]; then
            log_info "Removendo link $script..."
            rm -f "/usr/local/bin/$script"
        fi
    done
    
    log_success "Scripts de manuten√ß√£o removidos"
}

# Remover certificados SSL (opcional)
remove_ssl() {
    log_header "VERIFICANDO CERTIFICADOS SSL"
    
    if command -v certbot &> /dev/null; then
        log_info "Listando certificados Let's Encrypt..."
        local certs=$(certbot certificates 2>/dev/null | grep "Certificate Name:" | awk '{print $3}' || true)
        
        if [[ -n "$certs" ]]; then
            echo -e "${YELLOW}Certificados encontrados:${NC}"
            echo "$certs"
            echo ""
            read -p "Deseja remover os certificados SSL? (s/N): " remove_certs
            
            if [[ $remove_certs =~ ^[SsYy]$ ]]; then
                echo "$certs" | while read -r cert; do
                    if [[ -n "$cert" ]]; then
                        log_info "Removendo certificado $cert..."
                        certbot delete --cert-name "$cert" --non-interactive
                    fi
                done
                log_success "Certificados SSL removidos"
            else
                log_info "Certificados SSL mantidos"
            fi
        else
            log_info "Nenhum certificado Let's Encrypt encontrado"
        fi
    else
        log_info "Certbot n√£o encontrado"
    fi
}

# Limpar backups (opcional)
cleanup_backups() {
    log_header "LIMPANDO BACKUPS"
    
    if [[ -d /var/backups/bgpview ]]; then
        echo -e "${YELLOW}Diret√≥rio de backups encontrado: /var/backups/bgpview${NC}"
        read -p "Deseja remover os backups? (s/N): " remove_backups
        
        if [[ $remove_backups =~ ^[SsYy]$ ]]; then
            log_info "Removendo backups..."
            rm -rf /var/backups/bgpview
            log_success "Backups removidos"
        else
            log_info "Backups mantidos em /var/backups/bgpview"
        fi
    else
        log_info "Nenhum backup encontrado"
    fi
}

# Informa√ß√µes finais
show_completion() {
    log_header "DESINSTALA√á√ÉO CONCLU√çDA"
    
    echo -e "${GREEN}${BOLD}‚úÖ BGPView removido com sucesso!${NC}\n"
    
    echo -e "${BOLD}üìã O QUE FOI REMOVIDO:${NC}"
    echo "‚Ä¢ Aplica√ß√£o BGPView"
    echo "‚Ä¢ Servi√ßo systemd"
    echo "‚Ä¢ Configura√ß√£o do Nginx"
    echo "‚Ä¢ Usu√°rio do sistema"
    echo "‚Ä¢ Scripts de manuten√ß√£o"
    
    echo -e "\n${BOLD}üìã O QUE N√ÉO FOI REMOVIDO:${NC}"
    echo "‚Ä¢ PostgreSQL (banco de dados)"
    echo "‚Ä¢ Nginx (apenas a configura√ß√£o do BGPView)"
    echo "‚Ä¢ Python, Node.js e outras depend√™ncias"
    
    echo -e "\n${BOLD}üóÑÔ∏è PARA REMOVER O BANCO MANUALMENTE:${NC}"
    echo "sudo -u postgres dropdb $DB_NAME"
    echo "sudo -u postgres dropuser $DB_USER"
    
    echo -e "\n${BOLD}üîß PARA REMOVER DEPEND√äNCIAS (OPCIONAL):${NC}"
    echo "sudo apt remove --purge nodejs postgresql postgresql-contrib nginx"
    echo "sudo apt autoremove"
    
    echo -e "\n${GREEN}${BOLD}üéâ Sistema limpo!${NC}"
}

# Fun√ß√£o principal
main() {
    show_banner
    check_root
    confirm_uninstall
    
    log_info "Iniciando desinstala√ß√£o..."
    
    stop_services
    remove_systemd
    remove_nginx_config
    remove_application
    remove_user
    remove_scripts
    remove_ssl
    cleanup_backups
    
    show_completion
}

# Tratamento de erros
trap 'log_error "Erro durante a desinstala√ß√£o na linha $LINENO"; exit 1' ERR

# Executar desinstala√ß√£o
main "$@"
